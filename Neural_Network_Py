# Imports
import numpy as np
import pandas as pd

# Read dataset
data = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/cl_thyroid_conditions.csv')

# Change class label to binary
data["target_sick"] = data["target_sick"].astype('category')
data["target_sick_bin"] = data["target_sick"].cat.codes
data["sex=M"] = data["sex=M"].astype(float)

# Suffle data
cl_data = np.array(data.drop(['target_sick'], axis=1), dtype = float).T
np.random.shuffle(cl_data)

m, n = cl_data.shape

# Assign input and output
X = cl_data[0:n-1]
y = cl_data[-1]

# Activation function
def sigmoid(t):
    return 1/(1+np.exp(-t))

# Derivative of sigmoid
def sigmoid_derivative(p):
    return p * (1 - p)

# Class definition
class NeuralNetwork:
    def __init__(self, x,y):
        self.input = x
        self.w1 = np.random.rand(7,7) - 0.5 # 7 nodes in hidden layer
        self.w2 = np.random.rand(7,7) - 0.5
        self.y = y
        self.target = np.zeros(y.shape)
        self.alpha = 0.1
        
    def feedforward(self):
        self.layer1 = sigmoid(np.dot(self.input.T, self.w1))  # layer1 = step 4
        self.layer2 = sigmoid(np.dot(self.layer1, self.w2)) # layer2 = step 5
        return self.layer2
        
    def backprop(self):
        dk = (self.target - self.y)*sigmoid_derivative(self.layer2)
        self.d_w2 = np.dot(self.alpha, np.dot(dk, self.layer2))
        
        dj_in = np.dot(dk, self.w2)
        dj = dj_in*sigmoid_derivative(self.layer1)
        self.d_w1 = np.dot(self.alpha, np.dot(dj, self.input))

    def update_param(self):
        self.w1 += self.d_w1
        self.w2 += self.d_w2

    def train(self, X, y):
        self.target = self.feedforward()
        self.backprop()
        self.update_param()

NN = NeuralNetwork(X,y)
for i in range(10): # trains the NN 1000 times
    print ("for iteration # " + str(i) + "\n")
    print ("Input : \n" + str(X))
    print ("Actual target: \n" + str(y))
    print ("Predicted target: \n" + str(NN.feedforward()))
    #print ("Loss: \n" + str(np.mean(np.square(y - NN.feedforward())))) # mean sum squared loss
    #print ("Percentage: \n" + str(100 - (np.mean(np.square(y - NN.feedforward()))).astype(float))) # mean sum squared loss
    print ("\n")
  
NN.train(X, y)
